<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('StandAlone', 'doctrine');

/**
 * BaseStandAlone
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $page_id
 * @property boolean $fork
 * @property string $title
 * @property string $h1
 * @property string $slug
 * @property boolean $is_home
 * @property string $meta_title
 * @property string $meta_desc
 * @property string $meta_keywrds
 * @property string $content
 * @property integer $menu_order
 * @property boolean $is_main_section
 * @property integer $parent_id
 * @property StandAlone $Parent
 * @property Doctrine_Collection $Children
 * 
 * @method string              getPageId()          Returns the current record's "page_id" value
 * @method boolean             getFork()            Returns the current record's "fork" value
 * @method string              getTitle()           Returns the current record's "title" value
 * @method string              getH1()              Returns the current record's "h1" value
 * @method string              getSlug()            Returns the current record's "slug" value
 * @method boolean             getIsHome()          Returns the current record's "is_home" value
 * @method string              getMetaTitle()       Returns the current record's "meta_title" value
 * @method string              getMetaDesc()        Returns the current record's "meta_desc" value
 * @method string              getMetaKeywrds()     Returns the current record's "meta_keywrds" value
 * @method string              getContent()         Returns the current record's "content" value
 * @method integer             getMenuOrder()       Returns the current record's "menu_order" value
 * @method boolean             getIsMainSection()   Returns the current record's "is_main_section" value
 * @method integer             getParentId()        Returns the current record's "parent_id" value
 * @method StandAlone          getParent()          Returns the current record's "Parent" value
 * @method Doctrine_Collection getChildren()        Returns the current record's "Children" collection
 * @method StandAlone          setPageId()          Sets the current record's "page_id" value
 * @method StandAlone          setFork()            Sets the current record's "fork" value
 * @method StandAlone          setTitle()           Sets the current record's "title" value
 * @method StandAlone          setH1()              Sets the current record's "h1" value
 * @method StandAlone          setSlug()            Sets the current record's "slug" value
 * @method StandAlone          setIsHome()          Sets the current record's "is_home" value
 * @method StandAlone          setMetaTitle()       Sets the current record's "meta_title" value
 * @method StandAlone          setMetaDesc()        Sets the current record's "meta_desc" value
 * @method StandAlone          setMetaKeywrds()     Sets the current record's "meta_keywrds" value
 * @method StandAlone          setContent()         Sets the current record's "content" value
 * @method StandAlone          setMenuOrder()       Sets the current record's "menu_order" value
 * @method StandAlone          setIsMainSection()   Sets the current record's "is_main_section" value
 * @method StandAlone          setParentId()        Sets the current record's "parent_id" value
 * @method StandAlone          setParent()          Sets the current record's "Parent" value
 * @method StandAlone          setChildren()        Sets the current record's "Children" collection
 * 
 * @package    cartefinancement
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseStandAlone extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('stand_alone');
        $this->hasColumn('page_id', 'string', 255, array(
             'type' => 'string',
             'unique' => true,
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('fork', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('h1', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('slug', 'string', 255, array(
             'type' => 'string',
             'unique' => true,
             'length' => 255,
             ));
        $this->hasColumn('is_home', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
        $this->hasColumn('meta_title', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('meta_desc', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('meta_keywrds', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('content', 'string', 65535, array(
             'type' => 'string',
             'length' => 65535,
             ));
        $this->hasColumn('menu_order', 'integer', null, array(
             'type' => 'integer',
             'default' => 1,
             ));
        $this->hasColumn('is_main_section', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
        $this->hasColumn('parent_id', 'integer', null, array(
             'type' => 'integer',
             ));

        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('StandAlone as Parent', array(
             'local' => 'parent_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasMany('StandAlone as Children', array(
             'local' => 'id',
             'foreign' => 'parent_id',
             'orderBy' => 'menu_order asc'));
    }
}